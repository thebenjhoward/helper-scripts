#!/bin/python3
"""
Intedended to be a nice cli tool for converting colors to various formats for
easy use in applications which aren't nice and don't provide Hex and all that

Supported formats:
    RGB     [ rgb(r, g, b) ]
    HEX     [ #XXXXXX ]
    HSL     [ hsl(h, s, v) ]
    CMYK    [ cmyk(c%, m%, y%, k%) ]

"""
import argparse
import sys
import re

# Set up argument parser
parser = argparse.ArgumentParser(prog = 'ccolor', description='A simple tool to convert between color formats',
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('--to', metavar='FMT', 
                    choices=("rgb", "hex", "hsl", "cmyk"), help="Specify a single output format.")
parser.add_argument("COLOR", help="The color being converted. Can be in any of the following formats:\n" +
                                   "rgb: rgb(r, g, b)\n" +
                                   "hex: #XXXXXX\n" +
                                   "hsl: hsl(h, s, l)\n" + 
                                   "cmyk: cmyk(c, h, y, k)\n" +
                                   "Note: the percentage symbol is optional. The color should be in quotes")

def parse_color(colstr):
    """
    Attempts to parse the color input into a readable format for the rest
    of the program. If this fails, the entire program will exit.
    """
    if('rgb' in colstr):
        expr = r"rgb\(\s*([0-9]{1,3})\,\s*([0-9]{1,3})\,\s*([0-9]{1,3})\s*\)"
        results = re.search(expr, colstr)
        if(results and len(results.groups()) == 3):
            rgb = (int(results.group(1)), int(results.group(2)), int(results.group(3)))
            for val in rgb:
                if(val > 255):
                    print("Invalid rgb color. All values should be from 0-255.")
                    exit(-1)

            return ('rgb', rgb)

        else:
            print("Invalid rgb color. See help for more information")
            exit(-1)
    elif('#' in colstr):
        if(len(colstr) != 7):
            print("Invalid hex value. Only 6 digit hex values are supported")
            exit(-1)
        else:
            try:
                hexval = int(colstr[1:], 16)
                return ("hex", hexval)
            except:
                print("Failed to parse hex color")
                exit(-1)
    elif('hsl' in colstr):
        expr = r"hsl\(\s*([0-9]{1,3})\,\W*([0-9]{1,3})%{0,1}\,\s*([0-9]{1,3})%{0,1}\s*\)"
        results = re.search(expr, colstr)
        if(results and len(results.groups()) == 3):
            h = int(results.group(1))
            s = int(results.group(2))
            l = int(results.group(3))
            if(h < 0 or h > 359):
                print("Hue out of range. Range: 0-359")
                exit(-1)
            elif(s < 0 or s > 100):
                print("Saturation out of range. Range: 0-100%")
                exit(-1)
            elif(l < 0 or s > 100):
                print("Lightness out of range. Range: 0-100%")
                exit(-1)
            else:
                return ("hsl", (h, s, l))
        else:
            print("Invalid hsl color. See help for more information")
            exit(-1)
    elif('cmyk' in colstr):
        expr = r"cmyk\(\s*([0-9]{1,3})%{0,1}\,\W*([0-9]{1,3})%{0,1}\,\s*([0-9]{1,3})%{0,1}\,\s*([0-9]{1,3})%{0,1}\s*\)"
        results = re.search(expr, colstr)
        if(results and len(results.groups()) == 4):
            c = int(results.group(1))
            m = int(results.group(2))
            y = int(results.group(3))
            k = int(results.group(4))

            if(c < 0 or c > 100):
                print("Cyan out of range. Range: 0-100%")
                exit(-1)
            elif(m < 0 or m > 100):
                print("Magenta out of range. Range: 0-100%")
                exit(-1)
            elif(y < 0 or y > 100):
                print("Yellow out of range. Range: 0-100%")
                exit(-1)
            elif(k < 0 or k > 100):
                print("Black out of range. Range 0-100%")
                exit(-1)
            else:
                return("cmyk", (c, m, y, k))
        else:
            print("Invalid cmyk color. See help for more information")
            exit(-1)


# CONVERTERS
# These functions all convert from one format to another
# Some functions reuse others because a normal implementation
# of them would effectively do the same thing.

def RGBtoHEX(rgb):
    r, g, b = rgb
    return r * 65536 + g * 256 + b

def RGBtoHSL(rgb):
    r = rgb[0] / 255
    g = rgb[1] / 255
    b = rgb[2] / 255
    Cmax = max(r, g, b)
    Cmin = min(r, g, b)
    delta = Cmax - Cmin

    # Hue
    if(delta == 0):
        h = 0
    elif(Cmax == r):
        h = 60 * (((g - b) / delta) % 6)
    elif(Cmax == g):
        h = 60 * ((b - r) / delta + 2)
    else:
        h = 60 * ((r - g) / delta + 4)

    # Lightness
    l = (Cmax + Cmin) / 2

    # Saturation
    if(delta == 0):
        s = 0
    else:
        s = delta / (1 - abs(2 * l - 1))

    return (min(round(h), 359), min(round(s * 100), 100), min(round(l * 100), 100))

def RGBtoCMYK(rgb):
    r = rgb[0] / 255
    g = rgb[1] / 255
    b = rgb[2] / 255

    k = 1 - max(r, g, b)
    c = (1 - r - k) / (1 - k)
    m = (1 - g - k) / (1 - k)
    y = (1 - b - k) / (1 - k)

    return (min(round(c * 100), 100), min(round(m * 100), 100), min(round(y * 100), 100), min(round(k * 100), 100))


def HEXtoRGB(hexcol):
    return (int(hexcol / 65536), int((hexcol / 256) % 256), hexcol % 256)

def HEXtoHSL(hexcol):
    return RGBtoHSL(HEXtoRGB(hexcol))

def HEXtoCMYK(hexcol):
    return RGBtoCMYK(HEXtoRGB(hexcol))

def HSLtoRGB(hsl):
    h = hsl[0]
    s = hsl[1] / 100
    l = hsl[2] / 100

    c = (1 - abs(2 * l - 1)) * s
    x = c * (1 - abs(((h / 60) % 2) - 1))
    m = l - c / 2

    if(h >= 0 and h < 60):
        _rgb = (c, x, 0)
    elif(h >= 60 and h < 120):
        _rgb = (x, c, 0)
    elif(h >= 120 and h < 180):
        _rgb = (0, c, x)
    elif(h >= 180 and h < 240):
        _rgb = (0, x, c)
    elif(h >= 240 and h < 300):
        _rgb = (x, 0, c)
    else:
        _rgb = (c, 0, x)

    r = min(round((_rgb[0] + m) * 255), 255)
    g = min(round((_rgb[1] + m) * 255), 255)
    b = min(round((_rgb[2] + m) * 255), 255)

    return (r, g, b)

def HSLtoHEX(hsl):
    return RGBtoHEX(HSLtoRGB(hsl))

def HSLtoCMYK(hsl):
    return RGBtoCMYK(HSLtoRGB(hsl))

def CMYKtoRGB(cmyk):
    c = cmyk[0] / 100
    m = cmyk[1] / 100
    y = cmyk[2] / 100
    k = cmyk[3] / 100

    r = min(round(255 * (1 - c) * (1 - k)), 255)
    g = min(round(255 * (1 - m) * (1 - k)), 255)
    b = min(round(255 * (1 - y) * (1 - k)), 255)

    return (r, g, b)

def CMYKtoHEX(cmyk):
    return RGBtoHEX(CMYKtoRGB(cmyk))

def CMYKtoHSL(cmyk):
    return RGBtoHSL(CMYKtoRGB(cmyk))

def fmt_color(fmt, color):
    """Assumes color has the correct number of arguments"""

    if(fmt == 'rgb'):
        r, g, b = color
        return "rgb({}, {}, {})".format(r, g, b)
    elif(fmt == 'hex'):
        hexval = hex(color)[2:]
        while(len(hexval) < 6):
            hexval = "0" + hexval
        return "#" + hexval
    elif(fmt == 'hsl'):
        h, s, l = color
        return "hsl({}, {}%, {}%)".format(h, s, l)
    elif(fmt == 'cmyk'):
        c, m, y, k = color
        return "cmyk({}%, {}%, {}%, {}%)".format(c, m, y, k)

args = parser.parse_args()

color = parse_color(args.COLOR.lower())

if(args.to):
    if(args.to == 'rgb'):
        if(color[0] == 'rgb'):
            print(fmt_color('rgb', color[1]))
        elif(color[0] == 'hex'):
            print(fmt_color('rgb', HEXtoRGB(color[1])))
        elif(color[0] == 'hsl'):
            print(fmt_color('rgb', HSLtoRGB(color[1])))
        elif(color[0] == 'cmyk'):
            print(fmt_color('rgb', CMYKtoRGB(color[1])))
    elif(args.to == 'hex'):
        if(color[0] == 'rgb'):
            print(fmt_color('hex', RGBtoHEX(color[1])))
        elif(color[0] == 'hex'):
            print(fmt_color('hex', color[1]))
        elif(color[0] == 'hsl'):
            print(fmt_color('hex', HSLtoHEX(color[1])))
        elif(color[0] == 'cmyk'):
            print(fmt_color('hex', CMYKtoHEX(color[1])))
    elif(args.to == 'hsl'):
        if(color[0] == 'rgb'):
            print(fmt_color('hsl', RGBtoHSL(color[1])))
        elif(color[0] == 'hex'):
            print(fmt_color('hsl', HEXtoHSL(color[1])))
        elif(color[0] == 'hsl'):
            print(fmt_color('hsl', color[1]))
        elif(color[0] == 'cmyk'):
            print(fmt_color('hsl', CMYKtoHSL(color[1])))
    elif(args.to == 'cmyk'):
        if(color[0] == 'rgb'):
            print(fmt_color('cmyk', RGBtoCMYK(color[1])))
        elif(color[0] == 'hex'):
            print(fmt_color('cmyk', HEXtoCMYK(color[1])))
        elif(color[0] == 'hsl'):
            print(fmt_color('cmyk', HSLtoCMYK(color[1])))
        elif(color[0] == 'cmyk'):
            print(fmt_color('cmyk', color[1]))
else:
    if(color[0] == 'rgb'):
        rgb = color[1]
        hexcol = RGBtoHEX(color[1])
        hsl = RGBtoHSL(color[1])
        cmyk = RGBtoCMYK(color[1])
    elif(color[0] == 'hex'):
        rgb = HEXtoRGB(color[1])
        hexcol = color[1]
        hsl = HEXtoHSL(color[1])
        cmyk = HEXtoCMYK(color[1])
    elif(color[0] == 'hsl'):
        rgb = HSLtoRGB(color[1])
        hexcol = HSLtoHEX(color[1])
        hsl = color[1]
        cmyk = HSLtoCMYK(color[1])
    elif(color[0] == 'cmyk'):
        rgb = CMYKtoRGB(color[1])
        hexcol = CMYKtoHEX(color[1])
        hsl = CMYKtoHSL(color[1])
        cmyk = color[1]

    print(fmt_color('rgb', rgb))
    print(fmt_color('hex', hexcol))
    print(fmt_color('hsl', hsl))
    print(fmt_color('cmyk', cmyk))
